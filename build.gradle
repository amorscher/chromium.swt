plugins {
	id "com.google.osdetector" version "1.4.0"
	id "de.undercouch.download" version "3.2.0"
}

import de.undercouch.gradle.tasks.download.Download

// To download and copy cef natives for different OS, i.e.:
// ./gradlew copyCef -Pos=linux

ext.targetos = hasProperty('os') ? os : osdetector.os
ext.fragmentDir = "com.make.cef.${targetos}.${osdetector.arch}/${targetos}-${osdetector.arch}"
ext.cefDir = "../cefrust/cef_${targetos}"

println targetos

def cefFile() {
	def variant = (buildType == 'release') ? '_minimal' : ''
	def osname = (targetos == 'osx') ? 'macosx' : targetos
	"cef_binary_${cefVersion}_${osname}64${variant}"
}

task getCef(type: Download) {
	src "http://opensource.spotify.com/cefbuilds/${cefFile()}.tar.bz2"
    dest buildDir
    onlyIfNewer true
}

task unzip(dependsOn: getCef, type: Copy) {
    from tarTree("${buildDir}/${cefFile()}.tar.bz2")
    into buildDir
}

task getCefAndUnzip(dependsOn: unzip, type: Copy) {
    from "${buildDir}/${cefFile()}"
    into cefDir
}

task buildCefRustExe(dependsOn: getCefAndUnzip, type: Exec) {
    if ('windows' == osdetector.os) {
        environment("RUSTFLAGS", "-C link-arg=/SUBSYSTEM:WINDOWS -C link-arg=/ENTRY:mainCRTStartup");
	}
    workingDir '../cefrust'
    if (buildType == 'release')
	    commandLine 'cargo', 'build', "--bin", "cefrust_subp", "--${buildType}"
    else
        commandLine 'cargo', 'build', "--bin", "cefrust_subp"
}

task copyHeaders(type: Copy) {
    into '../rubyffi/cef/include'
    from("${cefDir}/include") {
        include 'base/'
        include 'capi/'
        include 'internal/'
    }
    mustRunAfter getCefAndUnzip
}

task genCefJavaBinding(dependsOn: [getCefAndUnzip, copyHeaders], type: Exec) {
    workingDir '../rubyffi'
    commandLine 'rake'
}

task copyJavaBinding(type: Copy) {
    genCefJavaBinding.finalizedBy copyJavaBinding
    from '../rubyffi/output'
    into 'com.make.cefswt/'
}

task genCefRustBinding(dependsOn: getCefAndUnzip, type: Exec) {
    workingDir '../cefrust'
    commandLine 'cargo', 'build', "--features", "gen"
}

task buildCefRustLib(dependsOn: getCefAndUnzip, type: Exec) {
	workingDir '../cefrust/cefrustlib'
    if (buildType == 'release')
	    commandLine 'cargo', 'build', "--${buildType}"
    else
        commandLine 'cargo', 'build'
}

task buildCefRust(dependsOn: [buildCefRustExe, buildCefRustLib]) {

}

task copyCefRust(type: Copy) {
    into fragmentDir
    if ('osx' == targetos) {
        into("cefrust_subp.app/Contents/") {
            from("../cefrust/") {
                include 'PkgInfo'
            }
        }
        into("cefrust_subp.app/Contents/") {
            from("../cefrust/") {
                include 'Info_subp.plist'
            }
            rename { 'Info.plist' }
        }
        into("cefrust_subp.app/Contents/MacOS/") {
            from("../cefrust/target/${buildType}") {
                include 'cefrust_subp*'
            }
        }         
    } else {
        from("../cefrust/target/${buildType}") {
            include 'cefrust_subp*'
        } 
    }
    if ('linux' == targetos) {
        from("../cefrust") {
            include 'libstdc++.so'
            rename { 'libstdcppcef.so' }
        }
    }
    from("../cefrust/cefrustlib/target/${buildType}") {
        include '*cefrustlib*'
    }
}

task copyCef(dependsOn: getCefAndUnzip, type: Copy) {
    from("${cefDir}/${buildType.capitalize()}") {
        exclude '*.lib'
        include '*.dll'
        include '*.so'
        include '*.bin'
        include 'Chromium Embedded Framework.framework/**'
        include 'widevinecdmadapter.plugin'
    }
    from("${cefDir}/Resources") {
        include 'locales/**'
        include '*.pak'
        include '*.dat'
    }
    into fragmentDir
}

task stripCefSymbols(type: Exec) {
	copyCef.finalizedBy stripCefSymbols
	enabled = ('linux' == osdetector.os && 'linux' == targetos && buildType != 'debug')
	workingDir fragmentDir
	commandLine 'strip', 'libcef.so'
}

task stripCefRust(type: Exec) {
	copyCefRust.finalizedBy stripCefRust
	enabled = ('linux' == osdetector.os && 'linux' == targetos && buildType != 'debug')
	workingDir fragmentDir
	commandLine 'strip', 'libcefrustlib.so', 'cefrust_subp'
}

task fixCefStdLink(type: Exec) {
    workingDir fragmentDir
	commandLine "${rootProject.projectDir}/patchelf", '--replace-needed', 'libstdc++.so.6', 'libstdcppcef.so', 'libcef.so'
}

task fixCefRpath(type: Exec) {
    workingDir fragmentDir
	commandLine "${rootProject.projectDir}/patchelf", '--set-rpath', '$ORIGIN', '--force-rpath', 'libcef.so'
}

task fixCefRustLibRpath(type: Exec) {
    workingDir fragmentDir
	commandLine "${rootProject.projectDir}/patchelf", '--set-rpath', '$ORIGIN', '--force-rpath', 'libcefrustlib.so'
}

task fixCefRustExeRpath(type: Exec) {
    workingDir fragmentDir
	commandLine "${rootProject.projectDir}/patchelf", '--set-rpath', '$ORIGIN', '--force-rpath', 'cefrust_subp'
}

task fixLibFrameworkLink(type: Exec) {
    workingDir "${fragmentDir}/cefrust_subp.app/Contents/MacOS/"
    executable 'install_name_tool'
    args '-change', "@rpath/Frameworks/Chromium Embedded Framework.framework/Chromium Embedded Framework", "@loader_path/../../../Chromium Embedded Framework.framework/Chromium Embedded Framework", "cefrust_subp"
}

task fixExeFrameworkLink(type: Exec) {
    workingDir fragmentDir
    executable 'install_name_tool'
    args '-change', "@rpath/Frameworks/Chromium Embedded Framework.framework/Chromium Embedded Framework", "@loader_path/Chromium Embedded Framework.framework/Chromium Embedded Framework", "libcefrustlib.dylib"
}

task fixLibLink(dependsOn: [fixCefRustExeRpath, fixCefRustLibRpath]) {
    if ('linux' == osdetector.os && 'linux' == targetos) {
        stripCefRust.finalizedBy fixLibLink
    }
}

task fixCefLink(dependsOn: [fixCefStdLink, fixCefRpath]) {
    if ('linux' == osdetector.os && 'linux' == targetos) {
        stripCefSymbols.finalizedBy fixCefLink
    }
}

task fixFrameworkLink(dependsOn: [fixLibFrameworkLink, fixExeFrameworkLink]) {
    if ('osx' == osdetector.os && 'osx' == targetos) {
        copyCefRust.finalizedBy fixFrameworkLink
    }
}

task copyNatives(dependsOn: [copyCef, copyCefRust]) {
	buildCefRust.finalizedBy copyNatives
	def libs = fileTree(dir: fragmentDir, exclude: ['files.properties', 'checksum'])
	inputs.files(libs)
    outputs.file("$copyCef.destinationDir/checksum")
    
    doLast {
        // checksum
        def output = libs.files.sort()
        def fileStreams = new Vector<InputStream>()
        output.collect(fileStreams) { it.newInputStream() }
        def seqStream = new SequenceInputStream(fileStreams.elements())
        def checksum = org.apache.commons.codec.digest.DigestUtils.md5Hex(seqStream)

        def f = new File(copyCef.destinationDir, 'checksum')
        f.text = checksum
    }
}

task writeProps(dependsOn: copyNatives, type: WriteProperties) {
    copyNatives.finalizedBy writeProps
    def props = new HashMap()
    props.put('cefVersion', cefVersion)
    doFirst {
        def parent = file(fragmentDir).toPath()
        def output = fileTree(dir: fragmentDir, exclude: 'files.properties').files.sort()

        output.collect { it.toPath() }.eachWithIndex { path, i ->
            props.put(i.toString().padLeft(2, '0'), path.subpath(parent.nameCount-1, path.nameCount).toString().replace("\\", "/")) 
        }
        props.put('checksum', new File(copyCef.destinationDir, 'checksum').text)
        properties props
    }
    //properties props
    comment 'auto generated'
    outputFile new File(copyCef.destinationDir, 'files.properties')
}

task buildSampleOsgi(type: GradleBuild) {
    dir = 'com.make.cef.sample.osgi'
    tasks = ['build', 'cleanOsgiRuntime', 'createOsgiRuntime']
}

task cleanMvn(type: Exec) {
    if ('windows' == osdetector.os) {
        commandLine 'cmd', '/C', 'mvnw -B clean -Psample,p2 -Dtycho.mode=maven', (gradle.startParameter.isOffline() ? '-o' : '-U')
    } else {
        executable './mvnw'
        args '-B', 'clean', '-Psample,p2', '-Dtycho.mode=maven', (gradle.startParameter.isOffline() ? '-o' : '-U')
    }
}

task buildSampleE4(type: Exec) {
    if ('windows' == osdetector.os) {
        commandLine 'cmd', '/C', 'mvnw -B verify -Psample', (gradle.startParameter.isOffline() ? '-o' : '-U')
    } else {
        executable './mvnw'
        args '-B', 'verify', '-P', 'sample', (gradle.startParameter.isOffline() ? '-o' : '-U')
    }
}

task buildP2Repo(type: Exec) {
    if ('windows' == osdetector.os) {
        commandLine 'cmd', '/C', 'mvnw -B verify -Pp2', (gradle.startParameter.isOffline() ? '-o' : '-U')
    } else {
        executable './mvnw'
        args '-B', 'verify', '-P', 'p2', (gradle.startParameter.isOffline() ? '-o' : '-U')
    }
}
